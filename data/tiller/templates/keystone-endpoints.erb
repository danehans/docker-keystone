#!/bin/sh
#
set -x
set -e

# Check for Root user
if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root or with sudo"
    exit 1
fi

export OS_SERVICE_TOKEN=<%= env_keystone_admin_token %>
export OS_SERVICE_ENDPOINT=http://<%= env_keystone_host %>:<%= env_keystone_admin_host_port %>/v2.0

if [ "${CONFIG_KEYSTONE}" == "true" ] ; then
  keystone service-create --name keystone --type identity --description 'OpenStack Identity'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ identity / {print $2}') --publicurl 'http://<%= env_keystone_host %>:<%= env_keystone_public_host_port %>/v2.0' --adminurl 'http://<%= env_keystone_host %>:<%= env_keystone_admin_host_port %>/v2.0' --internalurl 'http://<%= env_keystone_host %>:<%= env_keystone_public_host_port %>/v2.0'
fi

if [ "${CONFIG_GLANCE}" == "true" ] ; then
  keystone service-create --name glance --type image --description 'OpenStack Image Service'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ image / {print $2}') --publicurl 'http://<%= env_glance_api_host %>:9292/v2' --adminurl 'http://<%= env_glance_api_host %>:9292/v2' --internalurl 'http://<%= env_glance_api_host %>:9292/v2'
fi

if [ "${CONFIG_NOVA}" == "true" ] ; then
  keystone service-create --name nova --type compute --description 'OpenStack Compute Service'
  keystone service-create --name ec2 --type ec2 --description 'OpenStack EC2 service'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ compute / {print $2}') --publicurl 'http://<%= env_nova_api_host %>:8774/v2/$(tenant_id)s' --adminurl 'http://<%= env_nova_api_host %>:8774/v2/$(tenant_id)s' --internalurl 'http://<%= env_nova_api_host %>:8774/v2/$(tenant_id)s'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ ec2 / {print $2}') --publicurl 'http://<%= env_nova_api_host %>:8773/services/Cloud' --adminurl 'http://<%= env_nova_api_host %>:8773/services/Admin' --internalurl 'http://<%= env_nova_api_host %>:8773/services/Cloud'
fi

if [ "${CONFIG_CINDER}" == "true" ] ; then
  keystone service-create --name cinder --type volume --description 'OpenStack Volume Service'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ volume / {print $2}') --publicurl 'http://<%= env_cinder_api_host %>:8776/v1/$(tenant_id)s' --adminurl 'http://<%= env_cinder_api_host %>:8776/v1/$(tenant_id)s' --internalurl 'http://<%= env_cinder_api_host %>:8776/v1/$(tenant_id)s'
fi

if [ "${CONFIG_SWIFT}" == "true" ] ; then
  keystone service-create --name swift --type object-store --description 'OpenStack Storage Service'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ object-store / {print $2}') --publicurl 'http://<%= env_swift_proxy_host %>:8080/v1/AUTH_$(tenant_id)s' --adminurl 'http://<%= env_swift_proxy_host %>:8080/v1' --internalurl 'http://<%= env_swift_proxy_host %>:8080/v1/AUTH_$(tenant_id)s'
fi

if [ "${CONFIG_NEUTRON}" == "true" ] ; then
  keystone service-create --name neutron --type network --description 'OpenStack Networking Service'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ network / {print $2}') --publicurl 'http://<%= env_neutron_api_host %>:9696/' --adminurl 'http://<%= env_neutron_api_host %>:9696/' --internalurl 'http://<%= env_neutron_api_host %>:9696/'
fi

if [ "${CONFIG_HEAT}" == "true" ] ; then
  keystone service-create --name heat-cfn --type cloudformation --description 'Heat CloudFormation API'
  keystone service-create --name heat --type orchestration --description 'Heat Orchestration API'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ cloudformation / {print $2}') --publicurl 'http://<%= env_heat_api_host %>:8000/v1' --adminurl 'http://<%= env_heat_api_host %>:8000/v1' --internalurl 'http://<%= env_heat_api_host %>:8000/v1'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ orchestration / {print $2}') --publicurl 'http://<%= env_heat_api_host %>:8004/v1/%(tenant_id)s' --adminurl 'http://<%= env_heat_api_host %>:8004/v1/%(tenant_id)s' --internalurl 'http://<%= env_heat_api_host %>:8004/v1/%(tenant_id)s'
fi

if [ "${CONFIG_CEILOMETER}" == "true" ] ; then
  keystone service-create --name ceilometer --type metering --description 'OpenStack Telemetry Service'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ metering / {print $2}') --publicurl 'http://<%= env_ceilometer_api_host %>:8777/'  --adminurl 'http://<%= env_ceilometer_api_host %>:8777/' --internalurl 'http://<%= env_ceilometer_api_host %>:8777/'
fi

if [ "${CONFIG_TROVE}" == "true" ] ; then
  keystone service-create --name trove --type database --description 'OpenStack Database Service'
  keystone endpoint-create --region <%= env_region %> --service-id $(keystone service-list | awk '/ database / {print $2}') --publicurl 'http://<%= env_trove_api_host %>:8779/v1.0/\$(tenant_id)s' --adminurl 'http://<%= env_trove_api_host %>:8779/v1.0/\$(tenant_id)s' --internalurl 'http://<%= env_trove_api_host %>:8779/v1.0/\$(tenant_id)s'
fi

unset OS_SERVICE_TOKEN OS_SERVICE_ENDPOINT
